# Documentation: bayessynth 0.1

Author: Elias Tuomaala
Email: mail@eliastuomaala.com

This text file provides rudimentary documentation for the bayessynth Python library.


## Introduction

The bayessynth library is a Python implementation of the Bayesian Synthetic Control (BSC).
For a review of the BSC methodology, see https://arxiv.org/abs/1910.06106.
The library can be used more or less out-of-the-box
to fit the BSC model on any arbitrary dataset.
In its current version, the library only supports a single treated target society.
Further, the treatment effect must begin at some user-specified cutoff year
and then last throughout the rest of the time period.
Technically, the BSC model is fitted through Markov Chain Monte Carlo (MCMC) sampling using pymc3.


## General principles

The functions of the bayessynth library can be categorized under three broad categories:
modeling, analysis, and plotting.
In the typical workflow, they must be used in order.

The modeling sub-category currently consists of one single function: fit().
It parameterizes and sets up a pymc3 model for the underlying statistical task,
and then runs MCMC-sampling to estimate that model.
The user should be warned that, for most datasets, running bayessynth.fit() is computationally very heavy.
It can easily take 6-12 hours on ordinary computers or server instances.
The resulting sampling trace tends to be too large to be handled in memory, in the order some gigabytes,
so it is stored on disk in real time instead.
Generating this trace amounts to the core statistical task of the BSC framework;
all the remaining functions simply analyze this trace or its derivatives.

The analysis sub-category contains three additional functions:
read_tracefile(), summarize_ppc(), and summarize_factors().
They are used to analyze the MCMC trace.
The first one is really just a tool to carve out sections of the trace.
Recall that the trace in its entirety struggles to be held in memory;
this function carves out subsets of it for use by other functions.
The remaining two functions produce summary statistics for the posterior (predictive) distributions
of the target society's untreated trajectory and of the latent factors' trajectories.

The last sub-category consists of a number of plotting tools:
plot_ppc(), plot_ppc_diff(), plot_ppc_bell(), and plot_factors().
They are really just pre-configured wrappers around matplotlib and seaborn tools
that produce hopefully useful visualizations of the outcome distribution.
These functions do not work directly with the trace,
but rather require inputs generated by the analysis functions.


## Prior distribution

Though the library allows relatively flexible configurations,
a simple use case mostly only requires the user to specify very intuitive instructions:
a dataset, the name of the treated society, and the start year of the treatment.
However, in addition to these three intuitive parameters, the user must provide one technical one:
parameterization of the prior distribution.

The background behind this requirement is the probabilistic nature of the BSC model.
Unlike its frequentist relatives, the model requires a prior distribution.
Future versions of this library will include a tool to generate a workable solution
in the empirical Bayes mindset, but currently the user must enter these values manually.

The format of the prior specification is that of a Python dictionary.
For formatting, see the example code section further down.
The dictionary should have the following entries:

- sigma_gamma
    - the scaling parameter for the prior of the standard deviation of random noise
    - intuitively, this is the analyst's "best guess" for the scale of unexplained year-to-year variations in the data
- k_mu
    - mean of the (hierarchical) prior of the country fixed effect
    - intuitively, this should correspond to the analyst's best guess
      of the average value over the time period for the average country
- k_sd
    - standard deviation of the (hierarchical) prior of the country fixed effect
    - intuitively, this should describe the analyst's uncertainty over where "k_mu" should be
- k_gamma
    - scale of the standard deviation of the various countries' fixed effects' offsets from the average
    - intuitively, the analyst's guess of how much the time period average will vary from country to country
- alpha_mu
    - mean of the treatment effect's prior distribution
    - should always be set to zero
- alpha_sd
    - standard deviation of the treatment effect's prior distribution
    - should be made large, at least times the natural standard deviation of the underlying data
    - setting this value too large poses no issues; setting it too small may completely distort the findings
- b_mu
    - mean (for all factors) of the factor loadings' hierarchical prior
    - should always be set to zero
- b_sd
    - standard deviation (for all factors) of the factor loadings' hierachical prior
    - should always be set to 1.0
- b_gamma
    - scale (for all factors) of the standard deviation of the various countries' factor loadings' offsets from the average
    - should always be set to 1.0
- delta_mu
    - mean of the prior of the year fixed effect
    - should always be set to zero
- delta_sd
    - standard deviation of the prior of the year fixed effect
    - should indicate how much the analyst expects the average data value to vary from year to year


## Example code

import numpy as np
import pandas as pd
import bayessynth as bs

data_source, target_country, cutoff_year = 'gdp.csv', 'DEU', 1990
factors = 4
prior_distribution = {
                      'sigma_gamma': 500,
                      'k_mu': 16000,
                      'k_sd': 7000,
                      'k_gamma': 7000,
                      'alpha_sd': 30000,
                      'alpha_mu': 0,
                      'b_mu': 0,
                      'b_sd': 1,
                      'b_gamma': 1,
                      'delta_mu': 0,
                      'delta_sd': 10000
}
data = pd.read_csv(data_source)

bs.fit(data, target_country, cutoff_year, prior_distribution)
trace = bs.read_tracefile(target, data, factors)
result_summary = bs.summarize_ppc(target_country, data, trace, factors)
bs.plot(result_summary, cutoff_year, target_country, output='display')


## Full API (function docstrings)

### Modeling

fit(df, target, cutoff, prior,
    years=None, countries=None, llambda_raw=2, m=4,
    cwd=None, out_dst=None,
    chains=2, chain_length=25000, tune_length=5000, target_accept=0.90, treedepth=12, samplesize=2000, progressbar=True, mcmc_kwargs={},
    replace_files=False, verbose=True, trace_only=False):
    """Main function to estimate the BSC model for a single dataset.

    The BSC model is fitted on the dataset provided,
    using th pymc3 implementation of the NUTS (MCMC) sampler.
    The resulting sample trace is stored on hard drive
    along with various other summary statistics.
    
    Positional arguments:
        df - (pandas dataframe) data to be analyzed
        target - (str) title of target society in df's columns
        cutoff - (int) the start year of treatment for target society
        prior - (dict) prior distribution parameters

    Optional keyword arguments:
        years - (numpy array) subset of df's index; full index by default
        countries - (list) subset of countries in df's columns; all columns by default
        llambda_raw - (int) scaling parameter for factor prior standard devations; 2 by default
        m - (int) number of factors; 4 by default
        cwd - (str) current working directory path; inferred by default
        out_dst - (str) destination path for sampler output; automatically constructed by default
        chains - (int) number of parallel MCMC chains; 2 by default
        chain_length - (int) number of proper sampler steps per chain; 25000 by default
        tune_length - (int) number of additional tune-in steps per chain; 5000 by default
        target_accept - (float) NUTS sampler target acceptance rate; 0.9 by default
        treedepth - (int) NUTS sampler maximum tree depth; 12 by default
        samplesize - (int) size of a separately saved representative mini-sample; 2000 by default
        progressbar - (bool) print a live progressbar while sampling; True by default
        mcmc_kwargs - (dict) additional keyword arguments for the NUTS sampler
        replace_files - (bool) overwrite pre-existing sampler output files; False by default
        verbose - (bool) print messages to user; True by default
        trace_only - (bool) save only sampling trace, no summaries; False by default

    Output: None
    """

### Analysis

read_tracefile(target, data, m,
               trace_dir=None,
               varnames='ppc', outvarnames=None, years=None, portionsize=1000, cwd=None, tune_length=5000, print_frequency=5, verbose=True):
    """Convert set of hard drive MCMC tracefiles into a single pandas dataframe.
    
    This function reads bit-by-bit into memory the large tracefiles
    generated by bs.fit(), capturing only desired variables.
    Typically, the tracefiles are too large to fit in memory in full,
    so desired variables should be a small subset of the full variable list.

    Positional arguments:
        target - (str) title of target society in df's columns
        data - (pandas dataframe) dataset originally analyzed
        m - (int) number of factors

    Optional keyword arguments:
        trace_dir - (str) source directory of the tracefiles; bs.fit()'s default used by default
        varnames - (str or list) variable selection method ('ppc' or 'factors') or list of varnames
        outvarnames - (list) variable names to overwrite the original varnames
        years - (numpy array) subset of data's index; full index by default
        portionsize - (int) size of the bit of trace read into memory at once; 1000 by default
        cwd - (str) current working directory path; inferred by default
        tune_length - (int) number of additional tune-in steps per chain; bs.fit()'s default by default
        print_frequency - (int) number of portions read without printing updates to user; 5 by default
        verbose - (bool) print messages to user; True by default

    Output: pandas dataframe
    
    """
summarize_factors(target, data, trace_df, m,
                  years=None, cwd=None, dst=None, replace_files=False,
                  quantiles=[0.0, 0.005, 0.025, 0.5, 0.975, 0.995, 1.0]):
    """Analyze an MCMC trace: derive the latent factor distributions.
    
    This function summarizes a trace dataframe into
    a description of the mean and various probability intervals
    of the latent factor trajectories of.

    Positional arguments:
        target - (str) title of target society in df's columns
        data - (pandas dataframe) dataset originally analyzed
        trace_df - (pandas dataframe) sampling output for the appropriate variables
        m - (int) number of factors

    Optional keyword arguments:
        years - (numpy array) subset of data's index; full index by default
        cwd - (str) current working directory path; inferred by default
        dst - (str) filepath where to save function outputs; when not specified, nothing saved on disk
        replace_files - (bool) overwrite pre-existing output files; False by default
        quantiles - (list/numpy array) quantiles to capture; range, 99%-CI, 95%-CI, and median by default

    Output: pandas dataframe
    
    """

summarize_ppc(target, data, trace_df, m,
              years=None, cwd=None, dst=None, sigma_colname='sigma', replace_files=False, include_observed=True,
              quantiles=[0.0, 0.005, 0.025, 0.5, 0.975, 0.995, 1.0],
              other_columns=None):
    """Analyze an MCMC trace: derive the untreated posterior predictive trajectory.
    
    This function summarizes a trace dataframe into
    a description of the mean and various probability intervals
    of the posterior predictive trajectory of the target society.

    Positional arguments:
        target - (str) title of target society in df's columns
        data - (pandas dataframe) dataset originally analyzed
        trace_df - (pandas dataframe) sampling output for the appropriate variables
        m - (int) number of factors

    Optional keyword arguments:
        years - (numpy array) subset of data's index; full index by default
        cwd - (str) current working directory path; inferred by default
        dst - (str) filepath where to save function outputs; when not specified, nothing saved on disk
        sigma_colname - (str) name of the noise standard deviation varaible in trace_df
        replace_files - (bool) overwrite pre-existing output files; False by default
        include_observed - (bool) include observed data in the output df; True by default
        quantiles - (list/numpy array) quantiles to capture; range, 99%-CI, 95%-CI, and median by default
        other_columns - (iterable of (str, array)) additional columns to include

    Output: pandas dataframe
    
    """

### Plots

plot_factors(dfs, data, target,
             dstdir=None, filename=None, alpha=0.333, ci_lo='ci_0.025', ci_hi='ci_0.975', yscale=0,
             line_avg={'linestyle': '-', 'color': 'k', 'label': 'Mean predicted', 'linewidth': 1.0},
             xlabel='Year', ylabel='Value', title=None, image_format='pdf', output='disk',
             verbose=True):
    """Visualize the latent factor trajectories.
    
    This function turns a list of pandas datframes of summary statistics
    of the latent factors' posterior distributions
    into a matplotlib visualization.

    Positional arguments:
        dfs - (list) list of df-s of summary statistics for factors
        data - (pandas dataframe) dataset originally analyzed
        target - (str) title of target society in df's columns

    Optional keyword arguments:
        dstdir - (str) destination path for plot output directory; automatically constructed by default
        filename - (str) destination path for plot output filename; automatically constructed by default 
        alpha - (float) shading transparency of the confidence interval; 0.333 by default
        ci_lo - (str) variable/column name of the lower bound of the confidence interval; summarize_ppc()'s default by default
        ci_hi - (str) variable/column name of the upper bound of the confidence interval; summarize_ppc()'s default by default
        yscale - (int) orders of magnitude for scaling up the y-variable upon plotting; 0 by default
        line_avg - (dict) matplotlib kwargs for formatting the posterior mean trajectory; preconfigured by default
        xlabel - (str) label of X-axis; 'Year' by default
        ylabel - (str) label of Y-axis; 'Value' by default
        title - (str) title of the figure; None by default
        image_format - (str) file format of figure file; 'pdf' by default
        output - (str) 'disk' (save output on disk; default) or 'display' (display figure to user)
        verbose - (bool) print messages to user; True by default

    Output: None
    
    """

plot_ppc_bell(tracedf, data, target, m,
              difference=True, samplesize='full', year_pos=None, sigma_varname='sigma', dstdir=None, filename=None, alpha=0.333,
              line_kde={'color': 'k', 'label': '', 'linewidth': 1.3},
              shade_kde={'color': 'tab:blue', 'label': '', 'shade': True},
              line_obs={'linestyle': '--', 'color': 'k'},
              bandwidth='scott', xlabel='Value', ylabel='Probability density', title=None, image_format='pdf', output='disk',
              verbose=True):
    """Visualize the target society's cumulative treatment effect.
    
    This function turns a trace dataframe
    (with appropriate variables present)
    into a visualization of the posterior predictive distribution
    of the size of the cumulative treatment effect for the target society
    at a specified year (end of time period by default).

    Positional arguments:
        tracedf - (pandas dataframe) sampling output for the appropriate variables
        data - (pandas dataframe) dataset originally analyzed
        target - (str) title of target society in df's columns
        m - (int) number of factors; 4 by default

    Optional keyword arguments:
        difference - (bool) visualize treatment effect instead of absolute ppc value; True by default
        samplsize - (str or int) 'full' to use the full trace (default); integer to select ransom subsample
        year_pos - (int) position of the target year within  data's index (-1 ie. last year by default)
        sigma_varname - (str) name of the noise standard deviation varaible in tracedf; 'sigma' by default
        dstdir - (str) destination path for plot output directory; automatically constructed by default
        filename - (str) destination path for plot output filename; automatically constructed by default 
        alpha - (float) shading transparency of the confidence interval; 0.333 by default
        line_kde - (dict) matplotlib kwargs for formatting density plot's outline; preconfigured by default
        shade_kde - (dict) matplotlib kwargs for formatting density plot's shade; preconfigured by default
        line_obs - (dict) matplotlib kwargs for formatting observed value marker; preconfigured by default
        bandwidth - (str or float) density plot's bandwidth parameter or seaborn selection method therefor; 'scott' by default
        xlabel - (str) label of X-axis; 'Year' by default
        ylabel - (str) label of Y-axis; 'Probability density'
        title - (str) title of the figure; None by default
        image_format - (str) file format of figure file; 'pdf' by default
        output - (str) 'disk' (save output on disk; default) or 'display' (display figure to user)
        verbose - (bool) print messages to user; True by default

    Output: None
    
    """

plot_ppc_diff(summary, cutoff, target,
              dstdir=None, filename=None, m=None, alpha=0.333, ci_lo='ci_0.025', ci_hi='ci_0.975', ylim=None,
              line_avg={'linestyle': '--', 'color': 'k', 'label': 'Mean predicted'},
              line_obs={'linestyle': '-', 'color': 'k', 'label': 'Observed'},
              line_cutoff={'linestyle': ':', 'color': 'k'},
              xlabel='Year', ylabel='Value', title=None, image_format='pdf', output='disk',
              verbose=True):
    """Visualize the target society's treatment effect trajectory.
    
    This function turns a pandas datframe of summary statistics
    for the target society's posterior predictive trajectory
    into a visualization of the treatment effect's trajectory.
    
    Positional arguments:
        summary - (pandas dataframe) df of summary statistics for the target trajectory
        cutoff - (int) the start year of treatment for target society
        target - (str) title of target society in df's columns

    Optional keyword arguments:
        dstdir - (str) destination path for plot output directory; automatically constructed by default
        filename - (str) destination path for plot output filename; automatically constructed by default 
        m - (int) number of factors; 4 by default
        alpha - (float) shading transparency of the confidence interval; 0.333 by default
        ci_lo - (str) variable/column name of the lower bound of the confidence interval; summarize_ppc()'s default by default
        ci_hi - (str) variable/column name of the upper bound of the confidence interval; summarize_ppc()'s default by default
        ylim - (numpy array) y-value bounds for the plot; automatically configured by default
        line_avg - (dict) matplotlib kwargs for formatting the posterior mean trajectory; preconfigured by default
        line_obs - (dict) matplotlib kwargs for formatting the observed trajectory; preconfigured by default
        line_cutoff - (dict) matplotlib kwargs for formatting the cutoff year marker; preconfigured by default
        xlabel - (str) label of X-axis; 'Year' by default
        ylabel - (str) label of Y-axis; 'Value' by default
        title - (str) title of the figure; None by default
        image_format - (str) file format of figure file; 'pdf' by default
        output - (str) 'disk' (save output on disk; default) or 'display' (display figure to user)
        verbose - (bool) print messages to user; True by default

    Output: None
    
    """

plot_ppc(summary, cutoff, target,
         dstdir=None, filename=None, m=None, alpha=0.333, ci_lo='ci_0.025', ci_hi='ci_0.975', ylim=None,
         line_avg={'linestyle': '--', 'color': 'k', 'label': 'Mean predicted'},
         line_obs={'linestyle': '-', 'color': 'k', 'label': 'Observed'},
         line_cutoff={'linestyle': ':', 'color': 'k'},
         xlabel='Year', ylabel='Value', title=None, image_format='pdf', output='disk',
         verbose=True):
    """Visualize the target society's posterior predictive trajectory.
    
    This function turns a pandas datframe of summary statistics
    for the target society's posterior predictive trajectory
    into a matplotlib visualization.

    Positional arguments:
        summary - (pandas dataframe) df of summary statistics for the target trajectory
        cutoff - (int) the start year of treatment for target society
        target - (str) title of target society in df's columns

    Optional keyword arguments:
        dstdir - (str) destination path for plot output directory; automatically constructed by default
        filename - (str) destination path for plot output filename; automatically constructed by default 
        m - (int) number of factors; 4 by default
        alpha - (float) shading transparency of the confidence interval; 0.333 by default
        ci_lo - (str) variable/column name of the lower bound of the confidence interval; summarize_ppc()'s default by default
        ci_hi - (str) variable/column name of the upper bound of the confidence interval; summarize_ppc()'s default by default
        line_avg - (dict) matplotlib kwargs for formatting the posterior mean trajectory; preconfigured by default
        line_obs - (dict) matplotlib kwargs for formatting the observed trajectory; preconfigured by default
        line_cutoff - (dict) matplotlib kwargs for formatting the cutoff year marker; preconfigured by default
        xlabel - (str) label of X-axis; 'Year' by default
        ylabel - (str) label of Y-axis; 'Value' by default
        title - (str) title of the figure; None by default
        image_format - (str) file format of figure file; 'pdf' by default
        output - (str) 'disk' (save output on disk; default) or 'display' (display figure to user)
        verbose - (bool) print messages to user; True by default

    Output: None
    
    """
